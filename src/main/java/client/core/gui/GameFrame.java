
package client.core.gui;

import client.core.handler.ServerHandler;

import javax.swing.*;
import java.util.ArrayList;
import java.util.List;


public class GameFrame extends javax.swing.JFrame {

	private InitView initView;
	private NavigatorView navigatorView;
	private RoomView roomView;

	private ServerHandler handler;

    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
	    initComponents();
	    try {
		    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
			    if ("Nimbus".equals(info.getName())) {
				    javax.swing.UIManager.setLookAndFeel(info.getClassName());
				    break;
			    }
		    }
	    } catch (ClassNotFoundException
			    | InstantiationException
			    | javax.swing.UnsupportedLookAndFeelException
			    | IllegalAccessException ex) {
		    java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 354, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	public void startModel(ServerHandler serverHandler) {
		this.handler = serverHandler;
		initView = new InitView(handler);
		setPreferredSize(initView.getPreferredSize());
		setContentPane(initView);
		pack();
		setLocationRelativeTo(null);
		setVisible(true);
	}

	public void serverAcceptedName() {
		initNavigationView();
	}

	private void initNavigationView() {
		navigatorView = new NavigatorView(handler);
		setPreferredSize(navigatorView.getPreferredSize());
		setContentPane(navigatorView);
		pack();
		initView = null;
	}

	public void serverRefusedName() {
		initView.chosenNameIsBad();
	}

	public void updateRoomsList(ArrayList<String> names, ArrayList<Integer> players, ArrayList<Integer> spectators) {
		if (navigatorView != null) {
			navigatorView.updateRoomsList(names, players, spectators);
		}
	}

	public void serverRefusedRoomName() {
		if (navigatorView != null) {
			navigatorView.serverRefusedRoomName();
		}
	}

	public void serverRoomDoesntExist() {
		if (navigatorView != null) {
			navigatorView.serverRoomDoesntExist();
		}
	}

	public void serverAllowedEnteringRoom() {
		roomView = new RoomView(handler);
		setPreferredSize(roomView.getPreferredSize());
		setContentPane(roomView);
		pack();
		navigatorView = null;
		if (handler.isSpectator()) {
			roomView.spectatorMode();
		}
	}

	public void serverSaidGoodBye() {
		setVisible(false);
		dispose();
	}

	public void serverShutDown() {
		JOptionPane.showMessageDialog(this, "Server shut down", "Error", JOptionPane.ERROR_MESSAGE);
		setVisible(false);
		dispose();
	}

	public void serverClosedRoom() {
		initNavigationView();
	}

	public void severSentSpectatorsNumber(int spectators) {
		if (roomView != null) {
			roomView.severSentSpectatorsNumber(spectators);
		}
	}

	public void serverSentDiceResult(String player, int value) {
		if (roomView != null) {
			roomView.serverSentDiceResult(player, value);
		}
	}

	public void severSentPlayersList(List<String> players) {
		if (roomView != null) {
			roomView.severSentPlayersList(players);
		}
	}

	public void serverSentWinnerIs(String player) {
		if (roomView != null) {
			roomView.serverSentWinnerIs(player);
		}
	}

	public void serverSentGameStarted() {
		if (roomView != null) {
			roomView.serverSentGameStarted();
		}
	}

	public void serverSentPlayerTurn(String name) {
		if (roomView != null) {
			roomView.serverSentPlayerTurn(name);
		}
	}

	public void serverSentBadMove() {
		if (roomView != null) {
			roomView.serverSentBadMove();
		}
	}

	public void serverSentGameUpdate(ArrayList<String> players, ArrayList<int[]> horses) {
		if (roomView != null) {
			roomView.serverSentGameUpdate(players, horses);
		}
	}

	public void playerNowIsNavigator() {
		initNavigationView();
	}
}
