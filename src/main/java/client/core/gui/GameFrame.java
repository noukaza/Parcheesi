
package client.core.gui;

import client.core.handler.ServerHandler;

import javax.swing.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author NouakazaPc
 */
public class GameFrame extends javax.swing.JFrame {

	private InitView initView;
	private NavigatorView navigatorView;
	private RoomView roomView;

	private ServerHandler handler;

    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
	    initComponents();
	    try {
		    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
			    if ("Nimbus".equals(info.getName())) {
				    javax.swing.UIManager.setLookAndFeel(info.getClassName());
				    break;
			    }
		    }
	    } catch (ClassNotFoundException
			    | InstantiationException
			    | javax.swing.UnsupportedLookAndFeelException
			    | IllegalAccessException ex) {
		    java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	    }
    }

	public void serverAcceptedName() {
		initView = null;
		navigatorView = new NavigatorView(handler);
		setPreferredSize(navigatorView.getPreferredSize());
		setContentPane(navigatorView);
		pack();
    }

	public void serverRefusedName() {
		initView.chosenNameIsBad();
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 354, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	public void startModel(ServerHandler serverHandler) {
		this.handler = serverHandler;
		initView = new InitView(handler);
		setPreferredSize(initView.getPreferredSize());
		setContentPane(initView);
		pack();
		setLocationRelativeTo(null);
		setVisible(true);
	}

	public void updateRoomsList(ArrayList<String> names, ArrayList<Integer> players, ArrayList<Integer> spectators) {
		if (navigatorView != null) {
			navigatorView.updateRoomsList(names, players, spectators);
		}
	}

	public void serverRefusedRoomName() {
		if (navigatorView != null) {
			navigatorView.serverRefusedRoomName();
		}
	}

    public void serverSentRoomDoesntExist() {
        if (navigatorView != null)
            JOptionPane.showMessageDialog(null, "Room doesn't exist !!", "Error", JOptionPane.ERROR_MESSAGE);

    }

    public void serverAcceptedRoom() {


    }

    public void serverIsOff() {
        JOptionPane.showMessageDialog(null, "oops... server is off !!", "Error", JOptionPane.ERROR_MESSAGE);
        roomView = null;
        initView = null;
        navigatorView = null;
    }

    public void serverSendTheWinner(String player) {
        if (roomView != null) {
            roomView = null;
            JOptionPane.showMessageDialog(null, "the winner is: " + player, "Winner", JOptionPane.PLAIN_MESSAGE);
            navigatorView = new NavigatorView(handler);
            setPreferredSize(navigatorView.getPreferredSize());
            setContentPane(navigatorView);
            pack();
            setLocationRelativeTo(null);
            setVisible(true);
        }
    }

    public void serverRefusedTheMove() {
        if (roomView != null)
            JOptionPane.showMessageDialog(null, "bad move!! sory", "Error", JOptionPane.ERROR_MESSAGE);

    }

    public void serverSentPlayerTurn(String player) {
        if (roomView != null)
            JOptionPane.showMessageDialog(null, player + " it's your turn", "turn", JOptionPane.PLAIN_MESSAGE);

    }

    public void serverSentDiceResult(String player, int value) {
        if (roomView != null) {
            roomView.serverSentDiceResult(player, value);
        }
    }

    public void serversentSpectatorsNumber(int spectators) {
        if (roomView != null) {
            roomView.serversentSpectatorsNumber(spectators);
        }
    }

    public void serverSentRoomClosed() {
        if (roomView != null)
            JOptionPane.showMessageDialog(null, "ROOM CLOSED !! ", "Error", JOptionPane.ERROR_MESSAGE);

    }

    public void serverSentStatusSpectator() {
        if (roomView != null)
            JOptionPane.showMessageDialog(null, "There's no more places as a player, you are a spectator ", "spectator", JOptionPane.PLAIN_MESSAGE);

    }

    public void serverSentStatusPlayer() {
        if (roomView != null)
            JOptionPane.showMessageDialog(null, "Welcom player ", "player", JOptionPane.PLAIN_MESSAGE);
    }

    public void serverSentPlayerList(List<String> players) {
        if (roomView != null)
            roomView.playersListChanged(players);
    }

    public void serverUpdateGame(List<String> lines) {
        if (roomView != null)
            roomView.updateGame(lines);
    }

    public void serverSentgGameStart() {
        if (roomView != null)
            JOptionPane.showMessageDialog(null, "The game started ", "Game", JOptionPane.PLAIN_MESSAGE);
    }
}
